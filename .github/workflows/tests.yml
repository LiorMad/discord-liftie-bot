name: Basic Tests and Docker Build 

on:
  workflow_dispatch:
  push:
    branches:
      - master
      - '*'

env:
    DOCKERHUB_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
    DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
    CONTAINER_NAME: discord-liftie-bot

jobs:
  ci-cd-testing:
    # if: false
    name: CI, Testing, CD
    runs-on: [ubuntu-latest]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Dockerhub Login
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Build for Test
        uses: docker/build-push-action@v6
        id: build_for_test
        with:
          context: "{{defaultContext}}"
          push: false
          tags: ${{ env.DOCKERHUB_USERNAME }}/${{ env.CONTAINER_NAME }}:${{ github.sha }}

      - name: Docker Run
        id: docker_run
        run: |
          docker images
          docker run -d --name discord-liftie-bot  \
          -e BOT_TOKEN=${{ env.BOT_TOKEN }} \
          ${{ env.DOCKERHUB_USERNAME }}/${{ env.CONTAINER_NAME }}:${{ github.sha }}
          docker ps
          sleep 3

      - name: Check if data seed exists
        id: run_command
        run: |
          docker exec discord-liftie-bot ls -ltr /app/data/lifts_status.json

      - name: Check container status
        id: check_container_status
        run: |
          container_status=$(docker inspect --format '{{.State.Status}}' ${{ env.CONTAINER_NAME }})
          echo "Container Status: $container_status"
          if [[ "$container_status" != "running" ]]; then
            echo "Error: Docker container did not start correctly!"
            docker logs ${{ env.CONTAINER_NAME }} # Output logs for debugging
            exit 1
          fi

      - name: Check container logs for connection
        id: check_connection
        run: |
          # Attempt to get the docker logs and grep for the specific string.
          if ! docker logs ${{ env.CONTAINER_NAME }} 2>&1 | grep "Shard ID None has connected to Gateway"; then
            echo "::error::Error: 'Shard ID None has connected to Gateway' message not found in Docker logs."
            exit 1
          fi

      - name: Stop and remove container
        if: always()
        run: docker stop --timeout 3 ${{ env.CONTAINER_NAME }} && docker rm ${{ env.CONTAINER_NAME }}

      - name: Docker Hub push after test pass
        if: ${{ steps.check_connection.conclusion == 'success' }}
        run: | 
          echo Pushing to Dockerhub: ${{ env.DOCKERHUB_USERNAME }}/${{ env.CONTAINER_NAME }}:${{ github.sha }}
          docker push ${{ env.DOCKERHUB_USERNAME }}/${{ env.CONTAINER_NAME }}:${{ github.sha }}
